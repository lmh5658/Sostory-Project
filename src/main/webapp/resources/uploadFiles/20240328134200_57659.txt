1) 이클립스로 워크스페이스 열어서 워크스페이스 세팅하기 (한 pc에서 최초에 한번만 하면됨) (워크스페이스 : 작업환경)
   1_1) 웹 애플리케이션 개발을 하기 위해 java EE 환경으로 설정
   
   1_2) 보여질 UI 탭들 셋팅 하기  
   		[Window] - [Show View]
        (탭 : Project Explorer, Navigator, Console, Problems, Servers)
   
   1_3) New 했을때 뜨는 목록들 커스터마이징 하기 (선택적)
   		[Window] - [Perspective] - [Customize Perspective] - Shortcuts 탭
   		
   		하단의 내용 참고해서 기존에 체크되어있는거 다 해제한 후에 다시 체크하기 
   		(General > File, Folder)
   		(Java > Class, Interface, Package, Source Folder)
   		(Web > CSS File, HTML File, JSP File, Dynamic Web Project, Servlet)
   		(XML > XML File)
 
   1_4) Preferences 세팅 (인코딩 설정, 템플릿, 서버 Runtime Environments 셋팅) 
   		[Window] - [Preferences]
     
        1_4_1) 인코딩 설정  : 영어, 숫자, 한글 등 모든 문자셋을 사용할 수 있도록 UTF-8로 셋팅해야됨 (아래부분들 인코딩 체크)
		       (General - Workspace)
		       (General - Editors - Text Editors - Spelling)
		       (Web - CSS Files, HTML Files, JSP Files)
		       (XML - XML Files)
		       
		1_4_2) Code Templates 수정 (선택)
			   (Java - Code Style - Code Templates)
			   	> Code > Method Body, Catch block Body 쪽 눌러서 자동완성시 주석문 없게 수정하기
			   	
     	1_4_3) 서버 Runtime 잡기 : 이클립스에서 바로 서버를 실행할 수 있도록 연동하는 과정 (단, 구동시킬 서버는 pc에 설치되어있어야됨)
       		   (Server - Runtime Environments)
       		   > Add 클릭 > 설치한 아파치 톰캣과 동일한 버전 선택 > Next 
       		   		>> Create a New local Server 체크 후 Next 하면 Servers 탭에 서버 생성도 같이됨 (어짜피 나중에 서버 만들어야되니 체크한 채로 해도됨)
       		   > Name 수정 가능(안하면 기본값) > Browse 클릭 > 설치한 아파치 톰캣 폴더 선택  > Finish
------------------------------------------------------------------------------------------------------      		   
2) 생성된 서버 환경설정 하기 
   2_1) Servers 탭에 새로 생성된 Server 더블클릭하기 
   		(1_4_3 과정에서 생성이 됐을 것)
   		 만일 생성이 안되어있다면 Servers 탭 내에서 오른쪽 버튼 클릭 후 
   		 New > Server 클릭
   		 Apache Tomcat에 맞는 버전 선택 후 Server name 수정(선택적) 한 후 Finish
   
   2_2) 포트번호 재설정 
   		(현재 기본값으로 잡혀진 8080포트를 오라클 기본 포트가 동일 하므로 충돌 발생) -> 다른 걸로 변경해야됨 (현재 구동중인 프로세스 또는 서버 중에 사용안하는 포트번호로)
   		
   2_3) 왼쪽 하단 Server Options에 Server modules without publishing 체크할 것!!
        > 내가 지정한 output folder에 제대로 파일들이 가게끔! 무조건 체크할 것 (체크안할 시 나중에 실 기능 구현시 문제될 수 있음)
------------------------------------------------------------------------------------------------------
3) Dynamic Web Project 만들기 (동적인 웹 애플리케이션)
   3_1) 프로젝트 명 신중하게 작성할 것 > Next
   3_2) default output folder 경로 재설정  : src\main\webapp\WEB-INF\classes		> Next
        부연설명) output folder로 지정된 classes 폴더에는 컴파일된 클래스 파일들이 들어감 
               해당 컴파일된 파일(.java가 아닌 .class파일)들이 사실상 프로젝트 서비스 시 배포해야되는 실질적인 파일들임
               이때 개발 작업이 다 끝나고 배포시 해당 프로젝트가 압축되어 .war 파일로 만들어지는데 (이 .war파일이 서버에 올라가서 구동되는거임)
               이때 압축되어 나오는 폴더가 webapp 뿐이다. 
               즉, 이 안에 해당 컴파일된 클래스 파일들이 있어야 된다는 소리임
               근데 기본으로 작성되어있는 output folder 경로인 build\classes로 지정해 놓으면
               해당 그 폴더가 webapp 안에 만들어지는게 아니라 webapp 바깥쪽에 만들어지기 때문에 배포할 때 문제가 발생될 수 있음
               사실상 개발 할때는 문제되지 않지만 후에 개발이 다 끝나고 배포단계에서 문제가 생길수 있음)
         
   3_3) Context root : 이 애플리케이션만을 지칭할 수 있는 고유한 이름으로 지어줄 것 (기본값으로 프로젝트명으로 쓰여있음 / 보통은 재정의해주는 걸 권장)
   		부연설명) 하나의 서버로 여러개의 애플리케이션을 구동시킬 수 있음. 
   		       따라서 해당 애플리케이션에 접근하는 경로로 사용할 고유한 별칭같은 것! 
   		       즉, 각 애플리케이션을 구분 짓는 용도
   		       > 여기서 등록된 Context root가 최초 Context Path로 등록됨 (ContextPath는 서버 설정시 얼마든지 후에 수정할 수 있음)
   		
   		Content directory : 실제로 배포되는 폴더 (즉, 서버에 올라가는 폴더) 의 최상위 폴더명을 지정하는 것 
   							(기본값으로 src/main/webapp) 이를 웹 컨테이너라고 지칭함
   							경로를 수정할 수도 있지만 어짜피 나중에 스프링 프로젝트 만들때는 해당 폴더 구조로 되어있기 때문에
   							이 경로를 그대로 둘꺼임 
   							(이클립스 프로그램 버전에 따라 이 경로는 다르게 되어있을 수 있음 ex) WebContent) 
   		
   		Generate web.xml ~~ : 무조건 체크할 것 (기본적을 체크안되어있음)
   		부연설명) web.xml 문서는 기본적으로 이 애플리케이션에 대한 설정 정보를 작성하는 파일로 체크를 안하면 안만들어지기 때문에 체크하여 생성되게끔 해야됨
   			   서버 실행과 동시에 제일 먼저 읽혀지는 파일!! 
   		       궂이 web.xml파일을 수정할 일이 없으면 만들 필요는 없긴함
   		       왜냐면 굳이 web.xml파일이 애플리케이션 내에 없어도 해당 프로젝트를 구동하는 서버측 에서 web.xml을 가지고 있고 
   		       이 파일이 자동으로 실행되기 때문에 없어도 무방하긴 함. 
   		       그래도 혹시나 개발자가 직접 이 파일을 수정할 일이 있을 경우를 대비해서 무조건 생성해 놓는게 좋음
   
   3_4) Finish
------------------------------------------------------------------------------------------------------
4) 프로젝트 잘 생성 되었는지 반드시 먼저 체크해 볼것 
  (**** 이 내용은 git에서 clone 받은 후 해당 프로젝트를 처음 Open Project 했을 시에도 확인해야되는 내용 ****)
  
   4_1) 우선 프로젝트 폴더 구조 파악하기 
   		[프로젝트]-[src/main/webapp] - [WEB-INF] 폴더 안에 
   		 	classes 폴더 잘 만들어졌는지 확인하기 (프로젝트 생성시 output folder 경로 직접 수정했었음) 
   		 	web.xml 파일 잘 만들어졌는지 확인하기 (프로젝트 생성시 Generate web.xml~~~ 체크했었음)
   	 	
   4_2) 프로젝트 오른쪽 버튼 눌러서 properties 
 		- Project Facet : Java 버전 11이 맞는지 확인 (다른 버전일 경우 11로 변경 후 Apply)
 						  Dynamic Web Module에 체크 되어있는지 (안되어있다면 체크해야됨 => 그래야 웹 애플리케이션으로 인식되서 서버에 해당 프로젝트 올릴 수 있음)
 						  Dynamic Web Module 버전을 4.0으로 하기 (web module 버전별 허용되는 자바 버전들이 있고 Java11을 쓰는 우리는 4.0으로)
 						  오른쪽 Runtimes 탭에 현재 생성되어있는 Server 체크해두기! (어짜피 해당 Server에 해당 프로젝트를 올릴 예정이기 때문에)
 						  		> 이부분이 안되어있을 경우 간헐적으로 해당 프로젝트에서 서버관련한 파일(Servlet 클래스, jsp 파일)들에 빨간줄 오류가 뜰 수 있음 
   		- Java Build Path : Libraries 탭 > JRE System Library 버전 11이 맞는지 확인 (다른 버전일 경우 Edit로 default JRE 선택)
   							Source 탭 > output folder directory 경로가 프로젝트/src/main/webapp/WEB-INF/classes 가 맞는지 (아니면 수정할 것)
 		- Java Compiler : 11버전으로 잘 되어있는지 확인
------------------------------------------------------------------------------------------------------
5) 간단 테스트를 위해 index 파일 만들기
   서버로 해당 어플리케이션에 대해서 url로 요청시 보여질 메인 페이지로 web.xml에 등록해둔 welcome file 중 
   한개의 파일로 src/main/webapp 폴더 안에 만들어보기(주로 index.jsp)
------------------------------------------------------------------------------------------------------   
6) 생성되어있는 서버에 애플리케이션 올리기
   > 서버 오른쪽 버튼 > Add and Remove > 올리고자 하는 애플리케이션(3번 과정에서 생성한 프로젝트) 선택 후 오른쪽으로 옮기고 > Finish
   
   [참고] 현재 서버상에 구동중인 어플리케이션들을 보고자 한다면 서버 더블클릭 후 modules 탭에서 확인 가능
         > 여기서 contextPath를 얼마든지 수정 할 수 있음
------------------------------------------------------------------------------------------------------
7) 서버 Start 후 웹 애플리케이션 요청시 index페이지가 잘 열리는지 확인해보기
   > 브라우저 주소창에   "현재구동중인서버pc의IP주소:포트번호/컨텍스트패스"  으로 요청시 src/main/webapp 폴더 바로 하위에 있는 index 페이지가 찾아져서 보여짐
   					처음 컨텍스트패스 == context root명 == 해당 애플리케이션의 별칭